#!/bin/bash
set -e

cbi=git@github.com:kuerzn/cbi.git
suparch="[none|arch|ubuntu]"
rev=$2
machine=$3
user=$4
salt_git=git@github.com:kuerzn/salt.git
install_path=/usr/share/salt-cbi
#dd4c4d687fcde705bd061a45927386c936d006b7

#taken from https://github.com/falconindy/arch-install-scripts/blob/master/genfstab.in
usage() {
    cat <<EOF

     #### EXECUTE FROM TRUSTED SOURCE ####
     #### WITH VERIFIED SIGNATURES    ####

     usage: ${0##*/} $suparch <revision> <machine> <user>
    
     This script does:

       - install Salt (from GIT, master-less minion, no service)
          unless <none>.
       - configure SALT: file_root <user's home>/cbi/salt
       - create GPG Machine Key  "j0@<machine>"
       - check out the CBI <revision> into <user>'s HOME

     usage <user> <machine>

       - configure SALT: file_root <user's home>/cbi/salt

EOF
}

configure_salt ()  {
mkdir /etc/salt -p
cat <<EOF > /etc/salt/minion
# -*- mode: yaml; -*-
master: localhost
file_client: local
file_roots:
  base:
    - $1/cbi/salt
pillar_roots:
  base:
    - $1/cbi/pillar
grains:
  cbi_machine: $machine
  cbi_home: $1/cbi

EOF
}


checkout_cbi(){
		
		configure_salt
		
		# 1. install git and python stuff
		salt-call state.single pkg.installed name=git
		salt-call state.sls python
		
		# 2. create user
		salt-call state.single user.present name=$user
		home=`bash -c "echo ~$user"`

		# 3. configure Salt
		configure_salt $home
		
    # 3. clone cbi
		cd $home
		if [ -e cbi ]; then mv cbi cbi_backup_`uuidgen`; fi
		git clone $cbi cbi --config branch.master.merge= && \
				chown $user:$user cbi -R && \
				cd cbi && \
				git config  --unset branch.master.merge
				(	sudo -u $user git checkout $rev
		# check for correct REV
		if [ "$rev" = `git rev-parse HEAD` ]; then
				echo "OK"

		# check out newest master
				( sudo -u $user $home/cbi/bin/git-verify-commit-signature master &&
				sudo -u $user git checkout master ) || echo "
#### COULD NOT SWITCH TO BRANCH MASTER #####
"
				
		# 4. generate machine key
				su -c "$home/cbi/bin/gpg-generate-machine-keys 0 $machine" $user

				grain=`salt-call grains.item cbi_machine` 
				if [ "$grain" = "local: $machine" ];then
						echo "SETUP COMPLETE! Use salt to configure the system!"
				else
						echo "Problem with cbi_machine grain:
						$grain"
				fi
		fi
		)
}


###################################
##################################
#####  Start

if (( EUID != 0 )); then
    echo "Run this script as root." 1>&2
    exit 100
fi


if [[ $# -eq 2 ]]; then
		home=`bash -c "echo ~$1"`
		machine=$2
		configure_salt $home
		exit 0
elif [[ $# -ne 4  ]]; then
    usage
    exit $(( $# ? 0 : 1 ))
fi

if command -v salt-call; then
		checkout_cbi
		exit $?
fi


install_salt (){
(rm $install_path -fr
		mkdir $install_path -p
		cd $install_path
		git clone $salt_git $install_path && \
				python2 setup.py install && \
				checkout_cbi
)
}

case $1 in
    arch)
				(! grep -q  '#BOOTSTRAP' /etc/pacman.d/mirrorlist ) && \
						sed -i '1i Server = http://ftp.spline.inf.fu-berlin.de/mirrors/archlinux/$repo/os/$arch\n#BOOTSTRAP' /etc/pacman.d/mirrorlist
				pacman -Syy
				
				tp=/tmp/packer_tmp`uuidgen`
				
				#packer
				command -v packer || (
						echo ASD
						rm -rf $tp
						mkdir $tp && \
								cd $tp && \
								curl -o PKGBUILD https://aur.archlinux.org/packages/pa/packer/PKGBUILD && \
								makepkg -s --asroot --noconfirm && \
								pacman --noconfirm -U *.tar.xz && \
								rm -rf $tp
				) && \
						pacman -S --noconfirm --needed  python-m2crypto python2 python2-crypto python2-jinja  python2-psutil python2-pyzmq python2-yaml sudo && \
						packer --noconfirm --noedit -S python2-msgpack python-gnupg && \
						install_salt &&	checkout_cbi 
        ;;
		
    ubuntu)
        apt-get update
#				python-gnupg
				apt-get install python  python-jinja2 python-m2crypto python-support python-yaml python-zmq msgpack-python && install_salt && checkout_cbi				
        ;;
		none)
				echo "Skipping Salt installation"
				;;
    *)
        echo "First argument must be one of $suparch not  '$1'"
        ;;
esac

