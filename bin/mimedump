#!/usr/bin/perl -w
# http://search.cpan.org/~dskoll/MIME-tools-5.505/lib/MIME/Tools.pm
# from http://cpansearch.perl.org/src/DSKOLL/MIME-tools-5.505/examples/

=head1 NAME

mimedump - dump out the contents of a parsed MIME message

=head1 DESCRIPTION

Read a MIME stream from the stdin, and dump its contents to the stdout.

=head1 SYNOPSIS

    mimedump < mime.msg

=head1 AUTHOR

Andreas Koenig suggested this, and wrote the original code.
Eryq perverted the hell out of it.

=cut

use warnings qw( FATAL utf8 );

use MIME::Parser;
use MIME::WordDecoder;
use Data::Dumper;
use Encode;
use IPC::Open2;
use File::Temp qw/tempdir/;

binmode STDOUT, ':encoding(UTF-8)';
# binmode STDOUT, ':latin1';

#------------------------------
#
# dump_entity ENTITY, NAME
#
# Recursive routine for dumping an entity.
#
sub dump_entity {
	my ($entity, $name) = @_;
	defined($name) or $name = "'anonymous'";
	my $IO;
	
	# Output the body:
	my @parts =  $entity->parts;
	if (@parts) {                     # multipart...
		my $i;
		sub cm { return $_[0]->head->mime_type =~ /html/ }
		map { 
			dump_entity($_);
			print  '=' x 30, "\n";
		} sort {cm($b) cmp cm($a)} @parts; #html first!
	}
	else {                            # single part...	
		
		# Get MIME type, and display accordingly...
		my $type = $entity->head->mime_type;
		my $charset = $entity->head->mime_attr("content-type.charset");
		# print "$charset\n";
		my $body = $entity->bodyhandle;
		if ($type =~ /html/){
			open2(\*A,\*B,"w3m -I '$charset' -O 'UTF-8' -T text/html");
			$body->print(\*B);
			close B;
			binmode A, ':utf8';
			print $_ while(<A>);
		} elsif ($type =~ /^(text\/|message\/)/) {     # text: display it...
			print decode($charset,$body->as_string);
		}
		else {                                 # binary: just summarize it...
	    my $path = $body->path;
	    my $size = ($path ? (-s $path) : '???');
	    print ">>> This is a non-text message, $size bytes long.\n";
		}
	}
	1;
}

#------------------------------
#
# main
#
sub main {
    print STDERR "(reading from stdin)\n" if (-t STDIN);

    # Create a new MIME parser:
    my $parser = new MIME::Parser;
    
    # Create and set the output directory:
		     $tempdir = tempdir( CLEANUP => 1);
    $parser->output_dir($tempdir);
    
    # Read the MIME message:
    $entity = $parser->read(\*STDIN) or die "couldn't parse MIME stream";

		my $a=mime_to_perl_string($entity->head->get('from')."Subject: ".$entity->head->get('subject'));
		print $a;
    # Dump it out:
    dump_entity($entity);
}
exit(&main ? 0 : -1);

#------------------------------
1;

